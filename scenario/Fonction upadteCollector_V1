void Collector::bestDiago(Point positionCollector, Point newListTrie,
                          double distanceInit, vector<Point> &path,
                          int index, bool first, bool &stop) {
    int xOrigin = positionCollector.getCoordX();
    int yOrigin = positionCollector.getCoordY();

    if(distanceInit == 0) {
        cout << "premier boucle if distanceInit: " << distanceInit << " index: " << index << endl;
        cout << "xOrigin: " << xOrigin << "yOrigin: " << yOrigin << endl;
        return;
    } else {
        //cout << "je rentre en force dans le else" << endl; // ca rentre pas si le if est vrai mais alors pourquoi??????
        if(index == 1) { // droite haut
            Point step = Point(xOrigin + 1, yOrigin + 1);
            cout << "-----> diago droite haut" << endl;
            cout << "x: " << step.getCoordX() << " y: " << step.getCoordY() << endl;
            if(distanceInit > Entity::distance2Points(step, newListTrie)) {
                path.push_back(step);
                bestDiago(step, newListTrie,
                          Entity::distance2Points(step, newListTrie), path, 1, false,
                          stop);
                return;
            } else if(distanceInit <= Entity::distance2Points(step, newListTrie)) {
                cout << "distanceInit: " << distanceInit << " distance2: "
                     << distance2Points(step, newListTrie) << endl;
                if(first) {
                    stop = true;
                    return;
                }
                index++;
                cout << "changement d index a 2 avec x: " << xOrigin << " y: "
                     << yOrigin << endl;

                bestDiago(Point(xOrigin, yOrigin), newListTrie, distanceInit,
                          path, index, false, stop);
                return;
            }
        }
        if(index == 2) { // gauche haut
            Point step = Point(xOrigin - 1, yOrigin + 1);
            if(distanceInit > Entity::distance2Points(step, newListTrie)) {
                path.push_back(step);
                bestDiago(step, newListTrie,
                          Entity::distance2Points(step, newListTrie),
                          path, 2, false, stop);
                return;
            } else if(distanceInit <= Entity::distance2Points(step, newListTrie)) {
                cout << "distanceInit: " << distanceInit << " distance2: "
                     << distance2Points(step, newListTrie) << endl;
                if(first) {
                    stop = true;
                    return;
                }
                index++;
                cout << "changement d index a 3 avec x: " << xOrigin << " y: "
                     << yOrigin << endl;
                bestDiago(Point(xOrigin, yOrigin), newListTrie, distanceInit,
                          path, index, false, stop);
                return;
            }
        }
        if(index == 3) { // gauche bas
            Point step = Point(xOrigin - 1, yOrigin - 1);
            cout << "-----> diago gauche bas" << endl;
            cout << "x: " << step.getCoordX() << " y: " << step.getCoordY() << endl;
            if(distanceInit > Entity::distance2Points(step, newListTrie)) {
                path.push_back(step);
                bestDiago(step, newListTrie,
                          Entity::distance2Points(step, newListTrie),
                          path, 3, false, stop);
                return;
            } else if(distanceInit <= Entity::distance2Points(step, newListTrie)) {
                cout << "distanceInit: " << distanceInit << " distance2: "
                     << distance2Points(step, newListTrie) << endl;
                if(first) {
                    stop = true;
                    return;
                }
                index++;
                cout << "changement d index a 4 avec x: " << xOrigin << " y: "
                     << yOrigin << endl;
                bestDiago(Point(xOrigin, yOrigin), newListTrie, distanceInit,
                          path, index, false, stop);
                return;
            }
        }
        if(index == 4) { // droite bas
            Point step = Point(xOrigin + 1, yOrigin - 1);
            cout << "-----> diago droite bas" << endl;
            cout << "x: " << step.getCoordX() << " y: " << step.getCoordY() << endl;
            if(distanceInit > Entity::distance2Points(step, newListTrie)) {
                cout << " boucle if : distanceInit: " << distanceInit
                     << " distance2: " << distance2Points(step, newListTrie) << endl;
                if(Entity::distance2Points(step, newListTrie) == 0) {
                    cout << "je suis dedans tkt bg" << endl;
                    bestDiago(step, newListTrie,
                              Entity::distance2Points(step, newListTrie),
                              path, 4, false, stop);
                    return;
                    //return;
                } else {
                    cout << "je suis dans index 4 le if distanceInit > distance2"
                         << endl;
                    path.push_back(step);
                    bestDiago(step, newListTrie,
                              Entity::distance2Points(step, newListTrie),
                              path, 4, false, stop);
                    return;
                }
            } else if(distanceInit <= Entity::distance2Points(step, newListTrie)) {
                cout << "distanceInit: " << distanceInit << " distance2: "
                     << distance2Points(step, newListTrie) << endl;
                if(first) {
                    stop = true;
                    return;
                }
                index = 1;
                bestDiago(Point(xOrigin, yOrigin), newListTrie, distanceInit,
                          path, index, false, stop);
                return;

                /*
                bestDiago(step, newListTrie,
                          Entity::distance2Points(step, newListTrie),
                          path, index, false, stop);
                */
            }
        }
    }
}
